{
	"info": {
		"_postman_id": "6c01c7be-9ec2-4ef3-a8a0-887d60ad169c",
		"name": "feature_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36646991"
	},
	"item": [
		{
			"name": "POST. Первый пользователь",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('name');",
							"pm.expect(target).to.have.property('email');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');",
							"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Vitali\",\n    \"email\": \"vitali@gmail.com\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/admin/users"
			},
			"response": []
		},
		{
			"name": "POST. Второй пользователь",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('name');",
							"pm.expect(target).to.have.property('email');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');",
							"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Ivan\",\n    \"email\": \"Khokhlov@yandex.by\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/admin/users"
			},
			"response": []
		},
		{
			"name": "POST. Третий пользователь",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('name');",
							"pm.expect(target).to.have.property('email');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');",
							"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Vitali Khakhlou\",\n    \"email\": \"vitalikhokhlov@gmail.com\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/admin/users"
			},
			"response": []
		},
		{
			"name": "POST. Категория 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Категория должна содержать поля: id, name\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('name');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Рок Фестиваль\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/admin/categories"
			},
			"response": []
		},
		{
			"name": "POST. Событие 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('title');",
							"pm.expect(target).to.have.property('annotation');",
							"pm.expect(target).to.have.property('category');",
							"pm.expect(target).to.have.property('paid');",
							"pm.expect(target).to.have.property('eventDate');",
							"pm.expect(target).to.have.property('initiator');",
							"pm.expect(target).to.have.property('description');",
							"pm.expect(target).to.have.property('participantLimit');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('location');",
							"pm.expect(target).to.have.property('requestModeration');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\": \"Wargaiming Fest\",\n    \"category\": 1,\n    \"description\": \"Фестиваль тяжелого рока и металла, на котором выступят помимо отечественных групп, так же и известные зарубежные коллективы. Погрузитесь в атмосферу музыки и наслаждайтесь выступлениями ваших любимых исполнителей. Не упустите шанс увидеть их вживую!\",\n    \"eventDate\": \"2025-07-15 13:00:00\",\n    \"location\": {\n    \"lat\": 23.51,\n    \"lon\": 15.34\n  },\n    \"title\": \"Звезды отечественной и мировой сцены: Фестиваль 2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/users/1/events"
			},
			"response": []
		},
		{
			"name": "PATCH. Событие 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/:eventId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST. Комментарий 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const source = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});",
							"pm.test(\"Has comment create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test comment 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"});",
							"pm.test(\"Test comment 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, `\"text\" must be \"${source.text}\"`).to.eql(source.text);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Класс! Простоял в очереди несколько часов, но оно того стоило.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/3/events/1/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"3",
						"events",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST. Комментарий 2.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const source = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});",
							"pm.test(\"Has comment create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test comment 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"});",
							"pm.test(\"Test comment 'text' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text, `\"text\" must be \"${source.text}\"`).to.eql(source.text);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Надеюсь, погода будет солнечной, и алкоголь будет по адекватной цене.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/3/events/1/comments"
			},
			"response": []
		},
		{
			"name": "GET. Все комментарии события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должн содержать поля: id, text, authorName, event, created\", function () {",
							"    pm.expect(target[0]).to.have.property('id');",
							"    pm.expect(target[0]).to.have.property('text');",
							"    pm.expect(target[0]).to.have.property('authorName');",
							"    pm.expect(target[0]).to.have.property('event');",
							"    pm.expect(target[0]).to.have.property('createdOn');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "localhost:8080/events/1/comments"
			},
			"response": []
		},
		{
			"name": "DELETE. Комментарий 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "localhost:8080/users/3/comments/1"
			},
			"response": []
		},
		{
			"name": "DELETE. (АДМИН) Все комментарии",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "localhost:8080/admin/comments/2"
			},
			"response": []
		}
	]
}